// Ejemplo 1:
const frutas = ["Manzana", "Plátano", "Naranja"];
const verduras = ["Lechuga", "Tomate", "Pepino"];
const frutasVerduras = frutas.concat(verduras);
console.log(frutasVerduras); // ["Manzana", "Plátano", "Naranja", "Lechuga", "Tomate", "Pepino"]

// Ejemplo 2:
const numeros = [1, 2, 3, 4, 5];
numeros.copyWithin(2, 0, 2);
console.log(numeros); // [1, 2, 1, 2, 5]
// `copyWithin()` copia parte de un array a otra parte del mismo array, sobreescribiendo su contenido.

// Ejemplo 3:
const colores = ["Rojo", "Verde", "Azul"];
for (const [indice, color] of colores.entries()) {
  console.log(`Índice: ${indice}, Color: ${color}`);
}
// `entries()` devuelve un iterador de pares clave/valor para un array.

// Ejemplo 4:
const numerosPares = [2, 4, 6, 8, 10];
const todosPares = numerosPares.every(numero => numero % 2 === 0);
console.log(todosPares); // true
// `every()` verifica si todos los elementos en el array satisfacen una condición.

// Ejemplo 5:
const letras = ["a", "b", "c", "d", "e"];
letras.fill("x", 2, 4);
console.log(letras); // ["a", "b", "x", "x", "e"]
// `fill()` llena los elementos de un array con un valor estático, desde el índice inicial hasta el índice final.

// Ejemplo 6:
const estudiantes = [
  { nombre: "Ana", edad: 20 },
  { nombre: "Juan", edad: 25 },
  { nombre: "Pedro", edad: 18 },
  { nombre: "María", edad: 22 },
];
const estudiantesMayores = estudiantes.filter(estudiante => estudiante.edad >= 20);
console.log(estudiantesMayores); // [{ nombre: "Ana", edad: 20 }, { nombre: "Juan", edad: 25 }, { nombre: "María", edad: 22 }]
// `filter()` crea un nuevo array con elementos que pasan la prueba de una función.

// Ejemplo 7:
const animales = ["Perro", "Gato", "Conejo", "Vaca"];
const animalEncontrado = animales.find(animal => animal === "Conejo");
console.log(animalEncontrado); // "Conejo"
// `find()` devuelve el primer elemento que cumple una condición dada en un array.

// Ejemplo 8:
const numerosArray = [1, 3, 5, 7, 9];
const indiceEncontrado = numerosArray.findIndex(numero => numero === 7);
console.log(indiceEncontrado); // 3
// `findIndex()` devuelve el índice del primer elemento que cumple una condición dada en un array.

// Ejemplo 9:
const paises = ["España", "Francia", "Italia", "Alemania"];
paises.forEach(pais => console.log(`Hola desde ${pais}`));
// `forEach()` ejecuta una función una vez por cada elemento en un array.

// Ejemplo 10:
const palabra = "Hola";
const letrasArray = Array.from(palabra);
console.log(letrasArray); // ["H", "o", "l", "a"]
// `Array.from()` crea una nueva instancia de array a partir de un objeto iterable.

// Ejemplo 11:
const numerosArray2 = [1, 2, 3, 4, 5];
const numeroEncontrado = numerosArray2.includes(3);
console.log(numeroEncontrado); // true
// `includes()` determina si un array incluye un determinado elemento, devolviendo true o false según corresponda.

// Ejemplo 12:
const coloresArray = ["Rojo", "Verde", "Azul", "Rojo"];
const primerIndiceRojo = coloresArray.indexOf("Rojo");
console.log(primerIndiceRojo); // 0
// `indexOf()` devuelve el primer índice en el que se encuentra un elemento dado en el array.

// Ejemplo 13:
const nombres = ["Ana", "Juan", "Pedro", "María"];
const frase = nombres.join(", ");
console.log(frase); // "Ana, Juan, Pedro, María"
// `join()` une todos los elementos de un array en una cadena y devuelve esta cadena.

// Ejemplo 14:
const numerosArray3 = [1, 2, 3, 4, 5];
for (const indice of numerosArray3.keys()) {
  console.log(indice);
}
// `keys()` devuelve un nuevo objeto Array Iterator que contiene los índices de cada elemento del array.

// Ejemplo 15:
const coloresArray2 = ["Rojo", "Verde", "Azul", "Rojo"];
const ultimoIndiceRojo = coloresArray2.lastIndexOf("Rojo");
console.log(ultimoIndiceRojo); // 3
// `lastIndexOf()` devuelve el último índice en el que se encuentra un elemento dado en el array.

// Ejemplo 16:
const frutasArray = ["Manzana", "Plátano", "Naranja"];
const cantidadFrutas = frutasArray.length;
console.log(cantidadFrutas); // 3
// `length` propiedad que representa la cantidad de elementos en un array.

// Ejemplo 17:
const numerosArray4 = [1, 2, 3, 4, 5];
const numerosDobles = numerosArray4.map(numero => numero * 2);
console.log(numerosDobles); // [2, 4, 6, 8, 10]
// `map()` crea un nuevo array con los resultados de aplicar una función a cada elemento del array.

// Ejemplo 18:
const animalesArray = ["Perro", "Gato", "Conejo", "Vaca"];
const animalEliminado = animalesArray.pop();
console.log(animalesArray); // ["Perro", "Gato", "Conejo"]
// `pop()` elimina el último elemento de un array y devuelve ese elemento.

// Ejemplo 19:
const paisesArray = ["España", "Francia", "Italia"];
paisesArray.push("Alemania");
console.log(paisesArray); // ["España", "Francia", "Italia", "Alemania"]
// `push()` añade uno o más elementos al final de un array y devuelve la nueva longitud del array.

// Ejemplo 20:
const numerosArray5 = [1, 2, 3, 4, 5];
const sumaTotal = numerosArray5.reduce((suma, numero) => suma + numero, 0);
console.log(sumaTotal); // 15
// `reduce()` aplica una función a un acumulador y a cada valor de un array (de izquierda a derecha) para reducirlo a un único valor.

// Ejemplo 21:
const numerosArray6 = [1, 2, 3, 4, 5];
const sumaTotal2 = numerosArray6.reduceRight((suma, numero) => suma + numero, 0);
console.log(sumaTotal2); // 15
// `reduceRight()` aplica una función a un acumulador y a cada valor de un array (de derecha a izquierda) para reducirlo a un único valor.

// Ejemplo 22:
const letrasArray1 = ["a", "b", "c", "d", "e"];
letrasArray1.reverse();
console.log(letrasArray1); // ["e", "d", "c", "b", "a"]
// `reverse()` invierte el orden de los elementos de un array.

// Ejemplo 23:
const paisesArray2 = ["España", "Francia", "Italia", "Alemania"];
const paisEliminado = paisesArray2.shift();
console.log(paisesArray2); // ["Francia", "Italia", "Alemania"]
// `shift()` elimina el primer elemento de un array y devuelve ese elemento.

// Ejemplo 24:
const numerosArray7 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
const subconjuntoNumeros = numerosArray7.slice(2, 6);
console.log(subconjuntoNumeros); // [3, 4, 5, 6]
// `slice()` devuelve una copia de parte de un array en un nuevo array.

// Ejemplo 25:
const numerosArray8 = [1, 2, 3, 4, 5];
const algunNumeroPar = numerosArray8.some(numero => numero % 2 === 0);
console.log(algunNumeroPar); // true
// `some()` verifica si al menos un elemento en el array cumple con una condición dada.
